AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  AMI:
    Description: AMI for Amazon Linux 2023
    Type: String
    Default: "ami-0b44ce1dad7c202b7" # AMI 2024/07

  EC2InstanceType:
    Description: Instance type of Arm Instance
    Type: String 
    Default: "t4g.nano"

Resources:
    # **************************************************
    # VPC 2024/07/28
    # **************************************************
    VPC:
        Type: AWS::EC2::VPC
        Properties:
            CidrBlock: 10.0.0.0/16
            EnableDnsHostnames: true
            EnableDnsSupport: true
            InstanceTenancy: default
            Tags:
            - Key: Name
              Value: orca-test-vpc
    InternetGateway:
        Type: AWS::EC2::InternetGateway
        Properties:
            Tags:
            - Key: Name
              Value: orca-test-igw
    AttachGateway:
        Type: AWS::EC2::VPCGatewayAttachment
        Properties:
            VpcId: !Ref VPC
            InternetGatewayId: !Ref InternetGateway
    PublicRouteTable:
        Type: AWS::EC2::RouteTable
        DependsOn: AttachGateway
        Properties:
            VpcId: !Ref VPC
            Tags:
            - Key: Name
              Value: orca-test-PublicRoute
    PublicRoute:
        Type: AWS::EC2::Route
        DependsOn: AttachGateway
        Properties:
            RouteTableId: !Ref PublicRouteTable
            DestinationCidrBlock: 0.0.0.0/0
            GatewayId: !Ref InternetGateway
    PublicSubnetA:
        Type: AWS::EC2::Subnet
        DependsOn: AttachGateway
        Properties:
            AvailabilityZone: "ap-northeast-1a"
            CidrBlock: 10.0.1.0/24
            MapPublicIpOnLaunch: true
            VpcId: !Ref VPC
            Tags:
            - Key: Name
              Value: orca-PublicSubnet-a
    PublicSubnetRouteTableAssociationA:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            SubnetId: !Ref PublicSubnetA
            RouteTableId: !Ref PublicRouteTable
    PublicSubnetC:
        Type: AWS::EC2::Subnet
        DependsOn: AttachGateway
        Properties:
            AvailabilityZone: "ap-northeast-1c"
            CidrBlock: 10.0.2.0/24
            MapPublicIpOnLaunch: true
            VpcId: !Ref VPC
            Tags:
            - Key: Name
              Value: orca-test-PublicSubnet-c
    PublicSubnetRouteTableAssociationC:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            SubnetId: !Ref PublicSubnetC
            RouteTableId: !Ref PublicRouteTable
    SgWeb:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupName: orca-test-sg-web
            GroupDescription: SecurityGroup for Web Server
            VpcId: !Ref VPC
            SecurityGroupIngress:
            - IpProtocol: "TCP"
              FromPort: 22
              ToPort: 22
              CidrIp: 0.0.0.0/0
              Description: "ssh Outbound"
            SecurityGroupEgress:
            - IpProtocol: "TCP"
              FromPort: 443
              ToPort: 443
              CidrIp: 0.0.0.0/0
              Description: "https Outbound"

    # # **************************************************
    # # Elastic IP Address
    # # **************************************************
    ElasticIP:
        Type: "AWS::EC2::EIP"
        Properties:
            Domain: !Ref VPC
            Tags:
            - Key: Name
              Value: orca-test-ElaticIP

    # # **************************************************
    # # EC2
    # # **************************************************
    EC2Instance:
        Type: AWS::EC2::Instance
        Properties:
            AvailabilityZone: "ap-northeast-1a"
            CreditSpecification:
                CPUCredits: "standard"
            DisableApiTermination: false
            # MapPublicIpOnLaunch: false
            ImageId:
                !Ref AMI
            InstanceType:
                !Ref EC2InstanceType
            PrivateIpAddress:
                "10.0.1.28"
            SecurityGroupIds:
                - !GetAtt [VPC, DefaultSecurityGroup]
                - !Ref SgWeb
            SubnetId: !Ref PublicSubnetA
            Tags: 
            - Key: "Name"
              Value: "orca-test-ec2"
            EbsOptimized: true

    ElasticIPAssociate:
        Type: AWS::EC2::EIPAssociation
        Properties: 
            AllocationId: !GetAtt ElasticIP.AllocationId
            InstanceId: !Ref EC2Instance

